<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>machine-learning | Sarthak Grover</title>
    <link>https://sarthakgrover.github.io/tags/machine-learning/</link>
      <atom:link href="https://sarthakgrover.github.io/tags/machine-learning/index.xml" rel="self" type="application/rss+xml" />
    <description>machine-learning</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 01 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sarthakgrover.github.io/img/icon-192.png</url>
      <title>machine-learning</title>
      <link>https://sarthakgrover.github.io/tags/machine-learning/</link>
    </image>
    
    <item>
      <title>Network Anomaly Detection</title>
      <link>https://sarthakgrover.github.io/project/network-anomaly-detection/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/network-anomaly-detection/</guid>
      <description>

&lt;p&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/netflow-anomaly-detector&#34; target=&#34;_blank&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aim: Given some netflow network records, detect anomalous behavior (ex: port scanning, DoS, etc.)&lt;/p&gt;

&lt;h2 id=&#34;source&#34;&gt;Source:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;analyzer_clean.py: batches flows every 10s, and sends the batch for outlier detection.
Checks outlier ip_addresses (src and dst combined) to issue alerts.&lt;/li&gt;
&lt;li&gt;pandas_analysis.py: extract relevant continuous feature set and implement IQR outlier detection for a batch of flows.
Returns the src and dst addresses that were outliers based on number of connections and destination ports in the batch.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;additional-code&#34;&gt;Additional Code:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;analyzer.py: Original (unclean) code for outlier detection in multiple steps. Partially implemented and untested.

&lt;ol&gt;
&lt;li&gt;Check basics: packet lengths, local IPs, connection state, protocols, etc.&lt;/li&gt;
&lt;li&gt;Check src ip and dst ip against a blacklist set in memory&lt;/li&gt;
&lt;li&gt;Check dst_port and index first use for IP address + aggregate bytes&lt;/li&gt;
&lt;li&gt;Check IP address and number of ports, protocols, bytes&lt;/li&gt;
&lt;li&gt;Aggregate flows for (src_ip, dst_ip) pair every T sec and detect outlies statistically&lt;/li&gt;
&lt;li&gt;TODO: cluster input in batches using &amp;lsquo;rbf&amp;rsquo;&lt;/li&gt;
&lt;li&gt;TODO: train RNN based LSTM with good data, predict output&lt;/li&gt;
&lt;li&gt;TODO: aggregate output of all detectors for each flow and produce trustworthy probability&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;blacklist_update.py: code to update a static blacklist of malicious IP addresses&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data-files&#34;&gt;Data Files:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;data.csv: test file netflow data&lt;/li&gt;
&lt;li&gt;blacklist_ips.csv: offline csv of bad IP addresses generated by blacklist_update.py&lt;/li&gt;
&lt;li&gt;df_flow_features.pkl: pandas object with features extracted from the whole dataset grouped by flow tuple for ML&lt;/li&gt;
&lt;li&gt;df_src_dst_sampled_10s.pkl: pandas object with complete dataset sampled to 10s intervals for testing ML&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jupyter-notebooks&#34;&gt;Jupyter-Notebooks&lt;/h2&gt;

&lt;h3 id=&#34;netflow-data-scratch-file-ipynb&#34;&gt;netflow-data-scratch-file.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;explore netflow data&lt;/li&gt;
&lt;li&gt;group by given features and explore distribution and statistics&lt;/li&gt;
&lt;li&gt;loaded full chunk into memory for exploration&lt;/li&gt;
&lt;li&gt;histograms of destination port usage&lt;/li&gt;
&lt;li&gt;grouping by srcip-dstip&lt;/li&gt;
&lt;li&gt;grouping by flow (srcip, sport, dstip, dport, proto)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;anomaly-detectors-ipynb&#34;&gt;anomaly-detectors.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;feature extraction after grouping by flow&lt;/li&gt;
&lt;li&gt;input raw features: [&amp;lsquo;ts&amp;rsquo;,&amp;lsquo;ip_protocol&amp;rsquo;,&amp;lsquo;state&amp;rsquo;,&amp;lsquo;src_ip&amp;rsquo;,&amp;lsquo;src_port&amp;rsquo;,&amp;lsquo;dst_ip&amp;rsquo;,&amp;lsquo;dst_port&amp;rsquo;,&amp;lsquo;src_tx&amp;rsquo;,&amp;lsquo;dst_tx&amp;rsquo;]&lt;/li&gt;

&lt;li&gt;&lt;p&gt;output features: with (srcip, sport, dstip, dport, proto) as groupby key
    number of entries/connections: count(entries) grouped
    time_first_seen = ts1
    time_last_seen = ts2
    total time for flow (first_seen - current/end)
    bytes_up (sum src_tx)
    bytes_dw
    throughput_up (total bytes/total time)
    throughput_dw
    first_state
    last&lt;em&gt;state = (state)
    state&lt;/em&gt;(state) : number of connections per state
    cidr_src_ip: get supernet string using ipaddr
    cidr_dst_ip
    pvt_srcip: private IPs should be declared as private (True/False)
    pvt_dstip
    dport_80, dport_8080, dport_443, dport_22 (orthogonal)&lt;/p&gt;

&lt;h4 id=&#34;clustering&#34;&gt;Clustering&lt;/h4&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 components of PCA basically covered all the variance completely&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;k-means successfully found clusters for k=5, but features are not good for kmeans&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DBSCAN performed best and separated outliers clearly on plotting. Without true labels couldn&amp;rsquo;t confirm for all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;anomalous-ip-detector-ipynb&#34;&gt;anomalous-ip-detector.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;group by src_ip, dst_ip on whole data set&lt;/li&gt;
&lt;li&gt;sample the data every 10s to get 420 * (number of ip pairs) samples ~ 342093 samples&lt;/li&gt;

&lt;li&gt;&lt;p&gt;extract continuous and categorical features for ML: [&amp;lsquo;bytes_dw&amp;rsquo;, &amp;lsquo;bytes_dw&amp;rsquo;, &amp;lsquo;num_conns&amp;rsquo;,
   &amp;lsquo;num_flows&amp;rsquo;, &amp;lsquo;num_dst_port&amp;rsquo;, &amp;lsquo;num_src_port&amp;rsquo;, &amp;lsquo;tcp_conns&amp;rsquo;, &amp;lsquo;udp_conns&amp;rsquo;,
   &amp;lsquo;cidr_src_ip&amp;rsquo;, &amp;lsquo;cidr_dst_ip&amp;rsquo;, &amp;lsquo;pvt_src_ip&amp;rsquo;, &amp;lsquo;pvt_dst_ip&amp;rsquo;]&lt;/p&gt;

&lt;h4 id=&#34;clustering-1&#34;&gt;Clustering&lt;/h4&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCA again showed very good results, but required 4 components to cover 94% variance.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;k-means with multiple values showed low error for k=4 and lowest for k=8. Based on the data shape, rbf was applied.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DBSCAN and spectral clustering couldn&amp;rsquo;t work properly due to memory issues.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;flow-analyzer-ipynb&#34;&gt;flow-analyzer.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;for implementing and testing pandas_analyzer.py&lt;/li&gt;
&lt;li&gt;grouped batches of flows every 10s and extracted multiple numerical features&lt;/li&gt;
&lt;li&gt;4 main were used in testing for initial design: [num_dst_ports, num_conns, bytes_up, bytes_dw]&lt;/li&gt;
&lt;li&gt;analyzed each flow as a list and tested IQR against histograms of extracted features&lt;/li&gt;
&lt;li&gt;group by flow (srcip, sport, dstip, dport, proto)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;results&#34;&gt;Results:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Almost certain that 192.168.100.96 had the worst behavior.&lt;/li&gt;
&lt;li&gt;Multiple IPs had too much activity on non-mainstream ports&lt;/li&gt;
&lt;li&gt;15 dst_ips used more than a 100 unique ports each.&lt;/li&gt;
&lt;li&gt;Final simple implementation based on statistical outlier detection:&lt;/li&gt;
&lt;li&gt;only flow agg IQR with 2 features [num_dst_ports, num_conns]: Total Number of Alerts: 65752&lt;/li&gt;
&lt;li&gt;only flow agg IQR with num_dst_ports: Total Number of Alerts: 14366&lt;/li&gt;
&lt;li&gt;only flow agg IQR with num_conns: Total Number of Alerts: 60617&lt;/li&gt;
&lt;li&gt;only flow agg IQR with all features (including total bytes_up and total bytes_dw size): Total Number of Alerts: 6492&lt;/li&gt;
&lt;li&gt;All detectors in analyzer.py (basic, blacklist, port agg, ip_addr agg, flow agg): Total Number of Alerts: 92656&lt;/li&gt;
&lt;li&gt;PCA showed good results in covering the variance of extracted features&lt;/li&gt;
&lt;li&gt;Clustering worked better for features aggregated by flow tuples, not those aggregated by dst_ip, src_ip&lt;/li&gt;
&lt;li&gt;Not yet tried machine learning while batch processing&lt;/li&gt;
&lt;li&gt;Not yet tried unsupervised neural networks for this dataset due to lack of labels and guaranteed good data&lt;/li&gt;
&lt;li&gt;Last step should be ensemble based trust - instead of adding alerts at each detector, calculate the probability from
all filters&lt;/li&gt;
&lt;li&gt;IQR test is statistically sound, but there are much better algorithms (eg: hosp) that can replace it for histogram
based outlier detection. Additionally, batch processing of flows was essentially stateless, but number of new_ports is
an important feature to detect port-scans that requires previous state. This is currently missing and should be added.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IoT Fingerprinting</title>
      <link>https://sarthakgrover.github.io/project/iot-fingerprinting/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/iot-fingerprinting/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/livinglab&#34; target=&#34;_blank&#34;&gt;Code&lt;/a&gt; to collect traces using soft access point.&lt;/li&gt;
&lt;li&gt;Offload the security of a home network to a home router.&lt;/li&gt;
&lt;li&gt;Fingerprint IoT devices to learn their network profile.&lt;/li&gt;
&lt;li&gt;Collaborate with other gateways to detect anomalous behavior.&lt;/li&gt;
&lt;li&gt;Simulated user behavior and captured activity periods and background traffic for 10 different IoTs.&lt;/li&gt;
&lt;li&gt;Use PCI and extracted relevant network features from DNS, size, timing, and frequency to identify devices.&lt;/li&gt;
&lt;li&gt;Identify individual device network profiles and differentiate the behavior originating from device activities by formulating a clustering problem.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Face Tracking</title>
      <link>https://sarthakgrover.github.io/project/face-tracking/</link>
      <pubDate>Sat, 01 Mar 2008 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/face-tracking/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Developed a robust real-time face tracking algorithm using rank deficient face detection
to iteratively search and track the human face in each video frame.&lt;/li&gt;
&lt;li&gt;Demonstrated the system by mounting camera on robotic arm programmed via MATLAB.&lt;/li&gt;
&lt;li&gt;Potential applications include focusing on speaker
during conferences, and recording lectures.&lt;/li&gt;
&lt;li&gt;Results published in proceedings of \emph{IEEE CIS 2008}.&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;../../publication/face-tracking2008.pdf&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
