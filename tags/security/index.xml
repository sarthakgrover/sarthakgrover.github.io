<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security | Sarthak Grover</title>
    <link>https://sarthakgrover.github.io/tags/security/</link>
      <atom:link href="https://sarthakgrover.github.io/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <description>security</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 01 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sarthakgrover.github.io/img/icon-192.png</url>
      <title>security</title>
      <link>https://sarthakgrover.github.io/tags/security/</link>
    </image>
    
    <item>
      <title>Network Anomaly Detection</title>
      <link>https://sarthakgrover.github.io/project/network-anomaly-detection/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/network-anomaly-detection/</guid>
      <description>

&lt;p&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/netflow-anomaly-detector&#34; target=&#34;_blank&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aim: Given some netflow network records, detect anomalous behavior (ex: port scanning, DoS, etc.)&lt;/p&gt;

&lt;h2 id=&#34;source&#34;&gt;Source:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;analyzer_clean.py: batches flows every 10s, and sends the batch for outlier detection.
Checks outlier ip_addresses (src and dst combined) to issue alerts.&lt;/li&gt;
&lt;li&gt;pandas_analysis.py: extract relevant continuous feature set and implement IQR outlier detection for a batch of flows.
Returns the src and dst addresses that were outliers based on number of connections and destination ports in the batch.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;additional-code&#34;&gt;Additional Code:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;analyzer.py: Original (unclean) code for outlier detection in multiple steps. Partially implemented and untested.

&lt;ol&gt;
&lt;li&gt;Check basics: packet lengths, local IPs, connection state, protocols, etc.&lt;/li&gt;
&lt;li&gt;Check src ip and dst ip against a blacklist set in memory&lt;/li&gt;
&lt;li&gt;Check dst_port and index first use for IP address + aggregate bytes&lt;/li&gt;
&lt;li&gt;Check IP address and number of ports, protocols, bytes&lt;/li&gt;
&lt;li&gt;Aggregate flows for (src_ip, dst_ip) pair every T sec and detect outlies statistically&lt;/li&gt;
&lt;li&gt;TODO: cluster input in batches using &amp;lsquo;rbf&amp;rsquo;&lt;/li&gt;
&lt;li&gt;TODO: train RNN based LSTM with good data, predict output&lt;/li&gt;
&lt;li&gt;TODO: aggregate output of all detectors for each flow and produce trustworthy probability&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;blacklist_update.py: code to update a static blacklist of malicious IP addresses&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data-files&#34;&gt;Data Files:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;data.csv: test file netflow data&lt;/li&gt;
&lt;li&gt;blacklist_ips.csv: offline csv of bad IP addresses generated by blacklist_update.py&lt;/li&gt;
&lt;li&gt;df_flow_features.pkl: pandas object with features extracted from the whole dataset grouped by flow tuple for ML&lt;/li&gt;
&lt;li&gt;df_src_dst_sampled_10s.pkl: pandas object with complete dataset sampled to 10s intervals for testing ML&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jupyter-notebooks&#34;&gt;Jupyter-Notebooks&lt;/h2&gt;

&lt;h3 id=&#34;netflow-data-scratch-file-ipynb&#34;&gt;netflow-data-scratch-file.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;explore netflow data&lt;/li&gt;
&lt;li&gt;group by given features and explore distribution and statistics&lt;/li&gt;
&lt;li&gt;loaded full chunk into memory for exploration&lt;/li&gt;
&lt;li&gt;histograms of destination port usage&lt;/li&gt;
&lt;li&gt;grouping by srcip-dstip&lt;/li&gt;
&lt;li&gt;grouping by flow (srcip, sport, dstip, dport, proto)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;anomaly-detectors-ipynb&#34;&gt;anomaly-detectors.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;feature extraction after grouping by flow&lt;/li&gt;
&lt;li&gt;input raw features: [&amp;lsquo;ts&amp;rsquo;,&amp;lsquo;ip_protocol&amp;rsquo;,&amp;lsquo;state&amp;rsquo;,&amp;lsquo;src_ip&amp;rsquo;,&amp;lsquo;src_port&amp;rsquo;,&amp;lsquo;dst_ip&amp;rsquo;,&amp;lsquo;dst_port&amp;rsquo;,&amp;lsquo;src_tx&amp;rsquo;,&amp;lsquo;dst_tx&amp;rsquo;]&lt;/li&gt;

&lt;li&gt;&lt;p&gt;output features: with (srcip, sport, dstip, dport, proto) as groupby key
    number of entries/connections: count(entries) grouped
    time_first_seen = ts1
    time_last_seen = ts2
    total time for flow (first_seen - current/end)
    bytes_up (sum src_tx)
    bytes_dw
    throughput_up (total bytes/total time)
    throughput_dw
    first_state
    last&lt;em&gt;state = (state)
    state&lt;/em&gt;(state) : number of connections per state
    cidr_src_ip: get supernet string using ipaddr
    cidr_dst_ip
    pvt_srcip: private IPs should be declared as private (True/False)
    pvt_dstip
    dport_80, dport_8080, dport_443, dport_22 (orthogonal)&lt;/p&gt;

&lt;h4 id=&#34;clustering&#34;&gt;Clustering&lt;/h4&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 components of PCA basically covered all the variance completely&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;k-means successfully found clusters for k=5, but features are not good for kmeans&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DBSCAN performed best and separated outliers clearly on plotting. Without true labels couldn&amp;rsquo;t confirm for all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;anomalous-ip-detector-ipynb&#34;&gt;anomalous-ip-detector.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;group by src_ip, dst_ip on whole data set&lt;/li&gt;
&lt;li&gt;sample the data every 10s to get 420 * (number of ip pairs) samples ~ 342093 samples&lt;/li&gt;

&lt;li&gt;&lt;p&gt;extract continuous and categorical features for ML: [&amp;lsquo;bytes_dw&amp;rsquo;, &amp;lsquo;bytes_dw&amp;rsquo;, &amp;lsquo;num_conns&amp;rsquo;,
   &amp;lsquo;num_flows&amp;rsquo;, &amp;lsquo;num_dst_port&amp;rsquo;, &amp;lsquo;num_src_port&amp;rsquo;, &amp;lsquo;tcp_conns&amp;rsquo;, &amp;lsquo;udp_conns&amp;rsquo;,
   &amp;lsquo;cidr_src_ip&amp;rsquo;, &amp;lsquo;cidr_dst_ip&amp;rsquo;, &amp;lsquo;pvt_src_ip&amp;rsquo;, &amp;lsquo;pvt_dst_ip&amp;rsquo;]&lt;/p&gt;

&lt;h4 id=&#34;clustering-1&#34;&gt;Clustering&lt;/h4&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCA again showed very good results, but required 4 components to cover 94% variance.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;k-means with multiple values showed low error for k=4 and lowest for k=8. Based on the data shape, rbf was applied.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DBSCAN and spectral clustering couldn&amp;rsquo;t work properly due to memory issues.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;flow-analyzer-ipynb&#34;&gt;flow-analyzer.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;for implementing and testing pandas_analyzer.py&lt;/li&gt;
&lt;li&gt;grouped batches of flows every 10s and extracted multiple numerical features&lt;/li&gt;
&lt;li&gt;4 main were used in testing for initial design: [num_dst_ports, num_conns, bytes_up, bytes_dw]&lt;/li&gt;
&lt;li&gt;analyzed each flow as a list and tested IQR against histograms of extracted features&lt;/li&gt;
&lt;li&gt;group by flow (srcip, sport, dstip, dport, proto)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;results&#34;&gt;Results:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Almost certain that 192.168.100.96 had the worst behavior.&lt;/li&gt;
&lt;li&gt;Multiple IPs had too much activity on non-mainstream ports&lt;/li&gt;
&lt;li&gt;15 dst_ips used more than a 100 unique ports each.&lt;/li&gt;
&lt;li&gt;Final simple implementation based on statistical outlier detection:&lt;/li&gt;
&lt;li&gt;only flow agg IQR with 2 features [num_dst_ports, num_conns]: Total Number of Alerts: 65752&lt;/li&gt;
&lt;li&gt;only flow agg IQR with num_dst_ports: Total Number of Alerts: 14366&lt;/li&gt;
&lt;li&gt;only flow agg IQR with num_conns: Total Number of Alerts: 60617&lt;/li&gt;
&lt;li&gt;only flow agg IQR with all features (including total bytes_up and total bytes_dw size): Total Number of Alerts: 6492&lt;/li&gt;
&lt;li&gt;All detectors in analyzer.py (basic, blacklist, port agg, ip_addr agg, flow agg): Total Number of Alerts: 92656&lt;/li&gt;
&lt;li&gt;PCA showed good results in covering the variance of extracted features&lt;/li&gt;
&lt;li&gt;Clustering worked better for features aggregated by flow tuples, not those aggregated by dst_ip, src_ip&lt;/li&gt;
&lt;li&gt;Not yet tried machine learning while batch processing&lt;/li&gt;
&lt;li&gt;Not yet tried unsupervised neural networks for this dataset due to lack of labels and guaranteed good data&lt;/li&gt;
&lt;li&gt;Last step should be ensemble based trust - instead of adding alerts at each detector, calculate the probability from
all filters&lt;/li&gt;
&lt;li&gt;IQR test is statistically sound, but there are much better algorithms (eg: hosp) that can replace it for histogram
based outlier detection. Additionally, batch processing of flows was essentially stateless, but number of new_ports is
an important feature to detect port-scans that requires previous state. This is currently missing and should be added.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IOT DPI Analysis</title>
      <link>https://sarthakgrover.github.io/project/iot-dpi-analysis/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/iot-dpi-analysis/</guid>
      <description>

&lt;h2 id=&#34;customer-owned-and-managed-coam-internet-of-things-iot-security&#34;&gt;Customer Owned and Managed (COAM) Internet of Things (IoT) security&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Used DPI to study connectivity, security, and privacy of a subset of Comcast smart homes&lt;/li&gt;
&lt;li&gt;Developed script to search for PII in unencrypted IoT data&lt;/li&gt;
&lt;li&gt;Identified malfunctioning XBOX in one of the subscribers&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IoT Privacy</title>
      <link>https://sarthakgrover.github.io/project/iot-privacy/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/iot-privacy/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Tested multiple IoT devices in lab and exposed security and privacy issues at PrivacyCon 2016&lt;/li&gt;
&lt;li&gt;Found that a digital photoframe was susceptible to eavesdroppers and fails to encrypt photographs, and nest thermostat exposed private location information of nearest weather stations to the ISP (now patched)&lt;/li&gt;
&lt;li&gt;\hfill[\href{&lt;a href=&#34;https://www.cs.princeton.edu/news/citp-stitching-internet-things}{Link}&#34; target=&#34;_blank&#34;&gt;https://www.cs.princeton.edu/news/citp-stitching-internet-things}{Link}&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;../../publication/privacycon2016-grover.pdf&#34;&gt;presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://www.youtube.com/watch?v=-778aD_XVKI&#34; target=&#34;_blank&#34;&gt;talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Facade</title>
      <link>https://sarthakgrover.github.io/project/facade/</link>
      <pubDate>Fri, 01 Aug 2014 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/facade/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Designed and implemented a new encoding technique that uses web search terms to encode hidden messages in an upstream channel for censorship circumvention to resist fingerprinting attacks.&lt;/li&gt;
&lt;li&gt;Results published at FOCI 2014, San Diego, CA.&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;../../publication/facade2014.pdf&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://github.com/gsathya/htpt&#34; target=&#34;_blank&#34;&gt;code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SAZO</title>
      <link>https://sarthakgrover.github.io/project/sazo/</link>
      <pubDate>Tue, 01 Jan 2013 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/sazo/</guid>
      <description>

&lt;h1 id=&#34;sazo-securing-home-networks-from-malware-and-data-thefts&#34;&gt;SAZO: Securing Home Networks from Malware and Data Thefts&lt;/h1&gt;

&lt;p&gt;With the proliferation of technology in today’s households, there is a flurry of devices (Internet media streaming devices, Internet TVs, Internet radios, smartphones and tablets) which connect to the Internet, hence are open to attacks or compromises. With the growth of home networks consisting of a large number of poorly managed devices, the foremost threat faced by hosts on these networks is that they may be compromised, become sources of DDOS attacks, or sites of phishing attacks.&lt;/p&gt;

&lt;p&gt;Securing home networks is challenging as these networks are usually used by people who either don&amp;rsquo;t know or understand the underlying functioning of malware-conception and/or ways to combat malwares. Host-based antivirus solutions such as Kaspersky, Norton, AVG, etc., and their internet suites, are the most commonly employed security measures. Besides the obvious issue of not be up-to-date with the most recent signatures, they are heavily dependent on device&amp;rsquo;s operating system. The major weakness of these solutions is that they run inside the very hosts they are protecting, making them vulnerable to subversion by malware. Furthermore, such suites are not available for many devices such as internet TV, radio, gaming stations etc.&lt;/p&gt;

&lt;p&gt;This motivates an &amp;ldquo;out of the box&amp;rdquo; solution such as Comcast’s Constant Guard - which employs anti-malware technologies at the ISP-level, making it easier to manage and tamper proof. Such Internet security services provided by ISPs can alert users if traffic is routed from, or to a notorious website. Unfortunately, these services can only view the Internet side of a customer NAT, thus detecting whether or not the home is compromised, but not knowing where. Another shortcoming of such an approach is a monitoring software is required to be installed on each device that is secured.&lt;/p&gt;

&lt;p&gt;We propose a new approach &amp;ndash; SAZO (SAfe ZOne) &amp;ndash; to detect and warn users about compromised devices by monitoring home network traffic at the wireless router. For this, an end user, connects to Internet using a modified wireless router called a SAZO box. This box monitors the entire home traffic and detects anomalies with the help of SAZO servers in the cloud. Some advantages of this approach are 1) No need to install a monitoring agent on each device. This will obviously save storage space on the device and will not slow down other applications by consuming CPU cycles and RAM. Another issue with these agents is they need to be constantly updated to keep the malware signature database updated. This consumes the network bandwidth and often times, users might postpone updating them. More importantly, such an agent has to be explicitly installed on each device that needs protection. A user might forget to do so as new devices are added. Even if a diligent user installs it on every device, such an agent might not be available for every device and platform, 2) SAZO system offloads malware detection logic to the cloud. Not only this relieves a device from running the agent constantly but also when additional information becomes available to SAZO servers, previously undetected malware traffic can be identified, 3) For the devices that are classified as suspicious, traffic originated from them can be redirected to special inspection boxes using VPN and real-time protection. 4) Since a SAZO box is deployed at a vantage point where a home network is connected to Internet, it can tell which traffic originated from which device. This is normally not possible for solutions deployed at ISP level since the devices are behind NAT.&lt;/p&gt;

&lt;p&gt;We study malware spread and infection from access point view, (i.e., behind a NAT box). This vantage point allows us to not only discern if malware-traffic is being routed to the network but also point out the particular intra-network device which is responsible for the incoming/outgoing malicious traffic. This approach offers two distinct advantages over ISP-level solutions:
Fine-grained monitoring: As opposed to simply reporting on suspicious traffic at a customer level, the passive measurements collected from a BISmark router can help a customer and the ISP determine the device that is the source of a security incident, and possibly also provide more details about the nature of the compromise (e.g., what applications generated the offending traffic, and when).
More reactive: Although it may not be feasible to collect fine-grained measurements all of the time, BISmark can allow operators to collect more detailed measurements that are triggered by a particular event, as configured by the ISP.  For example, the BISmark router can perform deep-packet inspection of specific flows that are triggered by particular events or observations, such as a DNS lookup to a suspicious domain.&lt;/p&gt;

&lt;h2 id=&#34;background&#34;&gt;Background:&lt;/h2&gt;

&lt;h3 id=&#34;comcast-constant-guard&#34;&gt;Comcast Constant Guard:&lt;/h3&gt;

&lt;p&gt;This is a suite of solutions offered by network connectivity provider Comcast to protect users from variety of attacks such as bots, phishing and password security. It helps users to secure various home network devices. However, it is required to be installed on  each device.&lt;/p&gt;

&lt;h3 id=&#34;bismark-passive&#34;&gt;BISmark passive:&lt;/h3&gt;

&lt;p&gt;This software passively monitors network traffic on OpenWRT routers and periodically sends small anonymized updates to a central server for analysis. Specifically, it collects information about the devices connected to your home network, the type and amount of network traffic transferred by these devices, the domain names of Internet sites accessed by these devices, and the frequency of such access. BISmark-Passive never inspects or captures the application-level contents of your network traffic.&lt;/p&gt;

&lt;h3 id=&#34;information-collected&#34;&gt;Information collected:&lt;/h3&gt;

&lt;p&gt;Record first 24 bits of the MAC address of each device connected to the router. This gives us the manufacturer of the device and lets us differentiate between classes of devices
Count number of times a particular site (domain name) is visited.
Record the type of network application your devices use, and how frequently each application is used, by recording the quantity of network traffic associated with each TCP or UDP port number.
Collect information about the distribution of network traffic by recording the size of each unit of information (packet) transmitted through your BISmark router, as well as the date and time (microsecond accuracy) at which the transmission occurred.&lt;/p&gt;

&lt;h3 id=&#34;information-not-collected&#34;&gt;Information not collected:&lt;/h3&gt;

&lt;p&gt;Specific URLs: We do not record the complete URL of the site visited, only the domain name query and response.
Personally Identifiable Information (PII): We do not record your name, e-mail address, mailing address, MAC addresses or IP addresses except as described above. We never request or record financial information, social security numbers, birth dates, etc.
Application packet contents: We do not monitor the contents of e-mails, chat conversations, phone calls, file downloads, Web page contents, Internet login credentials, or anything else about your online activities except as described above.&lt;/p&gt;

&lt;h3 id=&#34;resources&#34;&gt;Resources:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;File format of updates sent: &lt;a href=&#34;https://github.com/projectbismark/bismark-passive&#34; target=&#34;_blank&#34;&gt;https://github.com/projectbismark/bismark-passive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Privacy statement for bismark-passive: &lt;a href=&#34;https://github.com/projectbismark/bismark-passive/blob/master/PRIVACY.md&#34; target=&#34;_blank&#34;&gt;https://github.com/projectbismark/bismark-passive/blob/master/PRIVACY.md&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;design&#34;&gt;Design:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://sarthakgrover.github.io/img/sazo_architecture.jpg&#34; alt=&#34;SAZO Architecture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;At a high level, a SAZO box will passively capture metadata of all network flows. This metadata will be uploaded to SAZO servers where it will be categorized as either infected, suspicious or benign using various classification algorithms. SAZO servers will install triggers in the SAZO box for suspicious devices. Upon hitting such triggers, traffic generated from these devices would be redirected for further inspection to SAZO servers. Once a device is confirmed to be infected, depending on the customer’s policy, all the traffic from that device would be either redirected to DPI devices or restricted and the user will be warned.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Preliminary work presented as a poster at the Homesys &amp;lsquo;13 workshop, Ubicomp. &lt;a href=&#34;../../publication/panoptes2013.pdf&#34;&gt;Poster&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Preliminary code tested on bismark router. &lt;a href=&#34;https://github.com/shahifaqeer/bismark-packages/blob/sazo/luci/luci-app-sazo/files/usr/lib/lua/luci/model/cbi/sazo/general.lua&#34; target=&#34;_blank&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bloom filter server and client implementation. &lt;a href=&#34;https://github.com/shahifaqeer/bloom_filter&#34; target=&#34;_blank&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
