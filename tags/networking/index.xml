<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>networking | Sarthak Grover</title>
    <link>https://sarthakgrover.github.io/tags/networking/</link>
      <atom:link href="https://sarthakgrover.github.io/tags/networking/index.xml" rel="self" type="application/rss+xml" />
    <description>networking</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 01 Oct 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://sarthakgrover.github.io/img/icon-192.png</url>
      <title>networking</title>
      <link>https://sarthakgrover.github.io/tags/networking/</link>
    </image>
    
    <item>
      <title>Network Anomaly Detection</title>
      <link>https://sarthakgrover.github.io/project/network-anomaly-detection/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/network-anomaly-detection/</guid>
      <description>

&lt;p&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/netflow-anomaly-detector&#34; target=&#34;_blank&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aim: Given some netflow network records, detect anomalous behavior (ex: port scanning, DoS, etc.)&lt;/p&gt;

&lt;h2 id=&#34;source&#34;&gt;Source:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;analyzer_clean.py: batches flows every 10s, and sends the batch for outlier detection.
Checks outlier ip_addresses (src and dst combined) to issue alerts.&lt;/li&gt;
&lt;li&gt;pandas_analysis.py: extract relevant continuous feature set and implement IQR outlier detection for a batch of flows.
Returns the src and dst addresses that were outliers based on number of connections and destination ports in the batch.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;additional-code&#34;&gt;Additional Code:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;analyzer.py: Original (unclean) code for outlier detection in multiple steps. Partially implemented and untested.

&lt;ol&gt;
&lt;li&gt;Check basics: packet lengths, local IPs, connection state, protocols, etc.&lt;/li&gt;
&lt;li&gt;Check src ip and dst ip against a blacklist set in memory&lt;/li&gt;
&lt;li&gt;Check dst_port and index first use for IP address + aggregate bytes&lt;/li&gt;
&lt;li&gt;Check IP address and number of ports, protocols, bytes&lt;/li&gt;
&lt;li&gt;Aggregate flows for (src_ip, dst_ip) pair every T sec and detect outlies statistically&lt;/li&gt;
&lt;li&gt;TODO: cluster input in batches using &amp;lsquo;rbf&amp;rsquo;&lt;/li&gt;
&lt;li&gt;TODO: train RNN based LSTM with good data, predict output&lt;/li&gt;
&lt;li&gt;TODO: aggregate output of all detectors for each flow and produce trustworthy probability&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;blacklist_update.py: code to update a static blacklist of malicious IP addresses&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;data-files&#34;&gt;Data Files:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;data.csv: test file netflow data&lt;/li&gt;
&lt;li&gt;blacklist_ips.csv: offline csv of bad IP addresses generated by blacklist_update.py&lt;/li&gt;
&lt;li&gt;df_flow_features.pkl: pandas object with features extracted from the whole dataset grouped by flow tuple for ML&lt;/li&gt;
&lt;li&gt;df_src_dst_sampled_10s.pkl: pandas object with complete dataset sampled to 10s intervals for testing ML&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;jupyter-notebooks&#34;&gt;Jupyter-Notebooks&lt;/h2&gt;

&lt;h3 id=&#34;netflow-data-scratch-file-ipynb&#34;&gt;netflow-data-scratch-file.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;explore netflow data&lt;/li&gt;
&lt;li&gt;group by given features and explore distribution and statistics&lt;/li&gt;
&lt;li&gt;loaded full chunk into memory for exploration&lt;/li&gt;
&lt;li&gt;histograms of destination port usage&lt;/li&gt;
&lt;li&gt;grouping by srcip-dstip&lt;/li&gt;
&lt;li&gt;grouping by flow (srcip, sport, dstip, dport, proto)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;anomaly-detectors-ipynb&#34;&gt;anomaly-detectors.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;feature extraction after grouping by flow&lt;/li&gt;
&lt;li&gt;input raw features: [&amp;lsquo;ts&amp;rsquo;,&amp;lsquo;ip_protocol&amp;rsquo;,&amp;lsquo;state&amp;rsquo;,&amp;lsquo;src_ip&amp;rsquo;,&amp;lsquo;src_port&amp;rsquo;,&amp;lsquo;dst_ip&amp;rsquo;,&amp;lsquo;dst_port&amp;rsquo;,&amp;lsquo;src_tx&amp;rsquo;,&amp;lsquo;dst_tx&amp;rsquo;]&lt;/li&gt;

&lt;li&gt;&lt;p&gt;output features: with (srcip, sport, dstip, dport, proto) as groupby key
    number of entries/connections: count(entries) grouped
    time_first_seen = ts1
    time_last_seen = ts2
    total time for flow (first_seen - current/end)
    bytes_up (sum src_tx)
    bytes_dw
    throughput_up (total bytes/total time)
    throughput_dw
    first_state
    last&lt;em&gt;state = (state)
    state&lt;/em&gt;(state) : number of connections per state
    cidr_src_ip: get supernet string using ipaddr
    cidr_dst_ip
    pvt_srcip: private IPs should be declared as private (True/False)
    pvt_dstip
    dport_80, dport_8080, dport_443, dport_22 (orthogonal)&lt;/p&gt;

&lt;h4 id=&#34;clustering&#34;&gt;Clustering&lt;/h4&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2 components of PCA basically covered all the variance completely&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;k-means successfully found clusters for k=5, but features are not good for kmeans&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DBSCAN performed best and separated outliers clearly on plotting. Without true labels couldn&amp;rsquo;t confirm for all.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;anomalous-ip-detector-ipynb&#34;&gt;anomalous-ip-detector.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;group by src_ip, dst_ip on whole data set&lt;/li&gt;
&lt;li&gt;sample the data every 10s to get 420 * (number of ip pairs) samples ~ 342093 samples&lt;/li&gt;

&lt;li&gt;&lt;p&gt;extract continuous and categorical features for ML: [&amp;lsquo;bytes_dw&amp;rsquo;, &amp;lsquo;bytes_dw&amp;rsquo;, &amp;lsquo;num_conns&amp;rsquo;,
   &amp;lsquo;num_flows&amp;rsquo;, &amp;lsquo;num_dst_port&amp;rsquo;, &amp;lsquo;num_src_port&amp;rsquo;, &amp;lsquo;tcp_conns&amp;rsquo;, &amp;lsquo;udp_conns&amp;rsquo;,
   &amp;lsquo;cidr_src_ip&amp;rsquo;, &amp;lsquo;cidr_dst_ip&amp;rsquo;, &amp;lsquo;pvt_src_ip&amp;rsquo;, &amp;lsquo;pvt_dst_ip&amp;rsquo;]&lt;/p&gt;

&lt;h4 id=&#34;clustering-1&#34;&gt;Clustering&lt;/h4&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCA again showed very good results, but required 4 components to cover 94% variance.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;k-means with multiple values showed low error for k=4 and lowest for k=8. Based on the data shape, rbf was applied.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;DBSCAN and spectral clustering couldn&amp;rsquo;t work properly due to memory issues.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;flow-analyzer-ipynb&#34;&gt;flow-analyzer.ipynb&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;for implementing and testing pandas_analyzer.py&lt;/li&gt;
&lt;li&gt;grouped batches of flows every 10s and extracted multiple numerical features&lt;/li&gt;
&lt;li&gt;4 main were used in testing for initial design: [num_dst_ports, num_conns, bytes_up, bytes_dw]&lt;/li&gt;
&lt;li&gt;analyzed each flow as a list and tested IQR against histograms of extracted features&lt;/li&gt;
&lt;li&gt;group by flow (srcip, sport, dstip, dport, proto)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;results&#34;&gt;Results:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Almost certain that 192.168.100.96 had the worst behavior.&lt;/li&gt;
&lt;li&gt;Multiple IPs had too much activity on non-mainstream ports&lt;/li&gt;
&lt;li&gt;15 dst_ips used more than a 100 unique ports each.&lt;/li&gt;
&lt;li&gt;Final simple implementation based on statistical outlier detection:&lt;/li&gt;
&lt;li&gt;only flow agg IQR with 2 features [num_dst_ports, num_conns]: Total Number of Alerts: 65752&lt;/li&gt;
&lt;li&gt;only flow agg IQR with num_dst_ports: Total Number of Alerts: 14366&lt;/li&gt;
&lt;li&gt;only flow agg IQR with num_conns: Total Number of Alerts: 60617&lt;/li&gt;
&lt;li&gt;only flow agg IQR with all features (including total bytes_up and total bytes_dw size): Total Number of Alerts: 6492&lt;/li&gt;
&lt;li&gt;All detectors in analyzer.py (basic, blacklist, port agg, ip_addr agg, flow agg): Total Number of Alerts: 92656&lt;/li&gt;
&lt;li&gt;PCA showed good results in covering the variance of extracted features&lt;/li&gt;
&lt;li&gt;Clustering worked better for features aggregated by flow tuples, not those aggregated by dst_ip, src_ip&lt;/li&gt;
&lt;li&gt;Not yet tried machine learning while batch processing&lt;/li&gt;
&lt;li&gt;Not yet tried unsupervised neural networks for this dataset due to lack of labels and guaranteed good data&lt;/li&gt;
&lt;li&gt;Last step should be ensemble based trust - instead of adding alerts at each detector, calculate the probability from
all filters&lt;/li&gt;
&lt;li&gt;IQR test is statistically sound, but there are much better algorithms (eg: hosp) that can replace it for histogram
based outlier detection. Additionally, batch processing of flows was essentially stateless, but number of new_ports is
an important feature to detect port-scans that requires previous state. This is currently missing and should be added.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IoT Fingerprinting</title>
      <link>https://sarthakgrover.github.io/project/iot-fingerprinting/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/iot-fingerprinting/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/livinglab&#34; target=&#34;_blank&#34;&gt;Code&lt;/a&gt; to collect traces using soft access point.&lt;/li&gt;
&lt;li&gt;Offload the security of a home network to a home router.&lt;/li&gt;
&lt;li&gt;Fingerprint IoT devices to learn their network profile.&lt;/li&gt;
&lt;li&gt;Collaborate with other gateways to detect anomalous behavior.&lt;/li&gt;
&lt;li&gt;Simulated user behavior and captured activity periods and background traffic for 10 different IoTs.&lt;/li&gt;
&lt;li&gt;Use PCI and extracted relevant network features from DNS, size, timing, and frequency to identify devices.&lt;/li&gt;
&lt;li&gt;Identify individual device network profiles and differentiate the behavior originating from device activities by formulating a clustering problem.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CDN Analysis</title>
      <link>https://sarthakgrover.github.io/project/cdn-analysis/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/cdn-analysis/</guid>
      <description>&lt;p&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/cdn-analysis&#34; target=&#34;_blank&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this work, we compared average page load times for the top 500 Alexa websites across CDNs and ASNs.&lt;/p&gt;

&lt;p&gt;Based on our algorithm, we estimated that 300 websites are using CDNs. We find that Google CDN gives the best performance with an average total response time of 0.48s. However, multiple requests to google.* domains are in fact redirected since Google detected that we are using a script to measure response timings. The worst performer was Alibaba CDN. In general, sites using CDNs outperformed those not using CDNs when comparing median time taken to load the complete page by 0.2s. Sites not using CDNs take 5x the time for TCP handshake, and 3x the time for SSL negotiation, when compared to those using CDNs. Time taken for DNS lookup, and WAIT time for server response is same across both groups.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://sarthakgrover.github.io/img/cdn_timing_comparison.png&#34; alt=&#34;CDN Analysis Results&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Grouping by ASN, we find that Google and Microsoft have the best performance, while Alibaba and ChinaNet have the worst performance. This is consistent with our timing analysis when grouped by CDNs. We found that 74.67% of detected CDN names correspond directly to the AS name. Two websites, liputan6.com and trello.com were using ASNs different from the detected CDN used to host most content on their webpages. Furthermore, we found 22 websites that were not using CDNs, hosted on ASes that also offer CDNs if needed.&lt;/p&gt;

&lt;p&gt;For more details, please visit: &lt;a href=&#34;../../publication/cdn-analysis2019.pdf&#34;&gt;Report&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IOT DPI Analysis</title>
      <link>https://sarthakgrover.github.io/project/iot-dpi-analysis/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/iot-dpi-analysis/</guid>
      <description>

&lt;h2 id=&#34;customer-owned-and-managed-coam-internet-of-things-iot-security&#34;&gt;Customer Owned and Managed (COAM) Internet of Things (IoT) security&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Used DPI to study connectivity, security, and privacy of a subset of Comcast smart homes&lt;/li&gt;
&lt;li&gt;Developed script to search for PII in unencrypted IoT data&lt;/li&gt;
&lt;li&gt;Identified malfunctioning XBOX in one of the subscribers&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IoT Privacy</title>
      <link>https://sarthakgrover.github.io/project/iot-privacy/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/iot-privacy/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Tested multiple IoT devices in lab and exposed security and privacy issues at PrivacyCon 2016&lt;/li&gt;
&lt;li&gt;Found that a digital photoframe was susceptible to eavesdroppers and fails to encrypt photographs, and nest thermostat exposed private location information of nearest weather stations to the ISP (now patched)&lt;/li&gt;
&lt;li&gt;\hfill[\href{&lt;a href=&#34;https://www.cs.princeton.edu/news/citp-stitching-internet-things}{Link}&#34; target=&#34;_blank&#34;&gt;https://www.cs.princeton.edu/news/citp-stitching-internet-things}{Link}&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;../../publication/privacycon2016-grover.pdf&#34;&gt;presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://www.youtube.com/watch?v=-778aD_XVKI&#34; target=&#34;_blank&#34;&gt;talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Spooky Scan Analysis</title>
      <link>https://sarthakgrover.github.io/project/spooky-scan/</link>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/spooky-scan/</guid>
      <description>&lt;p&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/spooky-analyzer&#34; target=&#34;_blank&#34;&gt;Code&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sanitize censorship traces collected using spooky scan.&lt;/li&gt;
&lt;li&gt;Analyze traces based on tcp flags to conclude overall Internet censorship and the relationship between network traffic of different countries.&lt;/li&gt;
&lt;li&gt;Use censorship ratios to predict outgoing or incoming censorship&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Broadband Upgrade</title>
      <link>https://sarthakgrover.github.io/project/broadband-upgrade/</link>
      <pubDate>Sun, 01 Mar 2015 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/broadband-upgrade/</guid>
      <description>&lt;p&gt;Internet service providers are facing mounting pressure from
regulatory agencies to increase the speed of their service offerings to
consumers; some are beginning to deploy gigabit-per-second speeds in
certain markets, as well. The race to deploy increasingly faster speeds
begs the question of whether users are exhausting the capacity that is
already available. Previous work has shown that users who are already
maximizing their usage on a given access link will continue to do so when
they are migrated to a higher service tier.&lt;/p&gt;

&lt;p&gt;In a unique controlled experiment involving thousands of Comcast subscribers in the same city, we analyzed usage patterns of two groups: a
control group (105 Mbps) and a randomly selected treatment group that
was upgraded to 250 Mbps without their knowledge. We study how users
who are already on service plans with high downstream throughput respond when they are upgraded to a higher service tier without their
knowledge, as compared to a similar control group. To our surprise, subscribers with moderate traffic demands increase their usage in response
to a service-tier upgrade relatively more than high-volume subscribers
do. We speculate that even though these users may not take advantage
of the full available capacity, the service-tier increase generally improves
performance, which causes them to use the Internet more than they otherwise would have.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Analyzed broadband usage patterns of a user group offered higher speed broadband without their knowledge; Found that difference in traffic demand was higher for moderate users as compared to high-volume subscribers&lt;/li&gt;
&lt;li&gt;Presented at CableLabs (Jul 2016) and FCC (Oct 2016)&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://www.youtube.com/watch?v=9QiovWtGtq0&#34; target=&#34;_blank&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;../../publication/traffic-demand-broadband-pam2015.pdf&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Facade</title>
      <link>https://sarthakgrover.github.io/project/facade/</link>
      <pubDate>Fri, 01 Aug 2014 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/facade/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Designed and implemented a new encoding technique that uses web search terms to encode hidden messages in an upstream channel for censorship circumvention to resist fingerprinting attacks.&lt;/li&gt;
&lt;li&gt;Results published at FOCI 2014, San Diego, CA.&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;../../publication/facade2014.pdf&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://github.com/gsathya/htpt&#34; target=&#34;_blank&#34;&gt;code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>FlowQoS</title>
      <link>https://sarthakgrover.github.io/project/flowqos/</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/flowqos/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Designed an SDN based system to allocate QoS based on application and devices in a home network. My main contribution was the DNS based flow classifier, which forwards traffic through appropriate traffic shapers in a home router.&lt;/li&gt;
&lt;li&gt;Results published at HotSDN 2014, Chicago, IL.&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;../../publication/flowqos2014.pdf&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Browserlab</title>
      <link>https://sarthakgrover.github.io/project/browserlab/</link>
      <pubDate>Sun, 01 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/browserlab/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Detect the performance bottleneck in a home network by collaborating between home devices.&lt;/li&gt;
&lt;li&gt;Created a monitoring system to collect detailed wireless measurements from synchronized devices in a home, and manage and upload this data to the centralized server for analysis.&lt;/li&gt;
&lt;li&gt;Tested uplink and downlink broadband performance from devices to detect if bottleneck is in the local wireless network or at the edge router.&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/connection_performance&#34; target=&#34;_blank&#34;&gt;analysis&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/browserlab-linktest&#34; target=&#34;_blank&#34;&gt;code&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We develop the browserlab daemon that listens on multiple network devices in a home, and propose collaborative bottleneck detection algorithm to identify if the access link is the bottleneck or the wireless is. Next, the daemon will be ported as a browser extension to scale the solution and collect large scale home wireless measurements.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/browserlab&#34; target=&#34;_blank&#34;&gt;setup-code&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/curltest&#34; target=&#34;_blank&#34;&gt;test-code&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Integrating and extending the Fathom and BISmark measurement platforms to develop a home network troubleshooter for internal and external network diagnosis. The API allows a user to communicate between connected clients, and with the gateway, to issue parallel tests to analyse the home networks performance.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Link to modified OpenWRT &lt;a href=&#34;https://github.com/shahifaqeer/luci-app-bismark&#34; target=&#34;_blank&#34;&gt;bismark&lt;/a&gt; &lt;a href=&#34;https://github.com/shahifaqeer/my-luci-bismark-0.11&#34; target=&#34;_blank&#34;&gt;build&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Programmed active traceroute test on bismark router and analyzed latency and throughput performance from routers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Project BISmark</title>
      <link>https://sarthakgrover.github.io/project/bismark/</link>
      <pubDate>Wed, 01 May 2013 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/bismark/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Analyzed active and passive network data from multiple homes to study network availability in various countries, popular devices in homes, and traffic usage with time.&lt;/li&gt;
&lt;li&gt;Monitoring system deployed on BISmark gateways to collect active and passive measurements.&lt;/li&gt;
&lt;li&gt;Found most home traffic is exchanged from a few devices to a small number of popular domains.&lt;/li&gt;
&lt;li&gt;First large scale measurement and analysis work which provides us a view of home networks behind the NAT and discusses the differences observed in kind of devices used, and the distribution of usage with time, in developed and developing countries.&lt;/li&gt;
&lt;li&gt;Results published at ACM SIGCOMM IMC 2013, Barcelona, Spain.&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://www.lincs.fr/events/peeking-behind-the-nat-an-empirical-study-of-home-networks/&#34; target=&#34;_blank&#34;&gt;talk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;../../publication/peeking-nat2013.pdf&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/passive&#34; target=&#34;_blank&#34;&gt;code&lt;/a&gt; for analysis.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Routing Analysis</title>
      <link>https://sarthakgrover.github.io/project/routing-analysis/</link>
      <pubDate>Wed, 01 Aug 2012 00:00:00 +0000</pubDate>
      <guid>https://sarthakgrover.github.io/project/routing-analysis/</guid>
      <description>&lt;p&gt;Analyzed traceroute data from access networks to a variety of Internet destinations and examined route persistence and prevalence. Our aim is to associate home network performance metrics with path changes due to traffic engineering policies.&lt;/p&gt;

&lt;p&gt;Preliminary results were presented in a talk at Active Internet Measurement Symposium (AIMS), CAIDA.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Link to &lt;a href=&#34;https://github.com/shahifaqeer/access-point-routing&#34; target=&#34;_blank&#34;&gt;code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
